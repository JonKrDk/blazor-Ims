@inject IViewInventoriesByNameUseCase ViewInventoriesByNameUseCase
@inject ILogger<InventoryListComponent> Logger

<table class="table">
	
	<thead>
		<tr>
			<th>Name</th>
			<th>Quantity</th>
			<th>Price</th>
			<th>Actions</th>
		</tr>
	</thead>
	
	<tbody>
		@if (inventoryList is not null && inventoryList.Count > 0)
		{
			@foreach (var inventory in inventoryList)
			{
				<InventoryListItemComponent Inventory="inventory" />
			}
		}
	</tbody>

</table>

@code {
	private List<Inventory>? inventoryList;

	[Parameter]
	public string? SearchInventoryFilter { get; set; }

	protected override async Task OnInitializedAsync()
	{
		Logger.LogDebug("InventoryListComponent.OnInitializedAsync()");
	}

	protected override async Task OnParametersSetAsync()
	{
		Logger.LogDebug("InventoryListComponent.OnParametersSetAsync()");
		inventoryList = (await ViewInventoriesByNameUseCase.ExecuteAsync(SearchInventoryFilter ?? string.Empty)).ToList();
	}
}